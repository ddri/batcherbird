use batcherbird_core::export::{ExportConfig, AudioFormat, SampleExporter};
use batcherbird_core::sampler::Sample;
use batcherbird_core::detection::DetectionConfig;
use std::path::PathBuf;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("🧪 Testing Batcherbird Export Formats");
    
    // Create test samples
    let test_samples = vec![
        Sample {
            note: 60, // C4
            velocity: 64,
            audio_data: vec![0.5, 0.3, 0.1, 0.0, -0.1, -0.3, -0.5], // Simple test waveform
            sample_rate: 44100,
            channels: 1,
        },
        Sample {
            note: 60, // C4
            velocity: 127,
            audio_data: vec![0.8, 0.6, 0.2, 0.0, -0.2, -0.6, -0.8], // Louder version
            sample_rate: 44100,
            channels: 1,
        },
        Sample {
            note: 64, // E4
            velocity: 64,
            audio_data: vec![0.4, 0.2, 0.1, 0.0, -0.1, -0.2, -0.4], // Different note
            sample_rate: 44100,
            channels: 1,
        },
    ];
    
    println!("   📊 Created {} test samples", test_samples.len());
    
    // Test SFZ Export
    println!("\n🎼 Testing SFZ Export...");
    let sfz_config = ExportConfig {
        output_directory: PathBuf::from("./test_output_sfz"),
        naming_pattern: "TestInstrument_{note_name}_{note}_{velocity}.wav".to_string(),
        sample_format: AudioFormat::SFZ,
        normalize: false,
        fade_in_ms: 0.0,
        fade_out_ms: 0.0,
        apply_detection: false,
        detection_config: DetectionConfig::default(),
        creator_name: Some("Test User".to_string()),
        instrument_description: Some("Test SFZ instrument generated by Batcherbird".to_string()),
    };
    
    let sfz_exporter = SampleExporter::new(sfz_config)?;
    let sfz_files = sfz_exporter.export_samples(&test_samples)?;
    
    println!("   ✅ Generated {} files:", sfz_files.len());
    for file in &sfz_files {
        println!("      📄 {}", file.display());
    }
    
    // Test Decent Sampler Export
    println!("\n🎹 Testing Decent Sampler Export...");
    let dspreset_config = ExportConfig {
        output_directory: PathBuf::from("./test_output_dspreset"),
        naming_pattern: "TestInstrument_{note_name}_{note}_{velocity}.wav".to_string(),
        sample_format: AudioFormat::DecentSampler,
        normalize: false,
        fade_in_ms: 0.0,
        fade_out_ms: 0.0,
        apply_detection: false,
        detection_config: DetectionConfig::default(),
        creator_name: Some("Test User".to_string()),
        instrument_description: Some("Test Decent Sampler instrument generated by Batcherbird".to_string()),
    };
    
    let dspreset_exporter = SampleExporter::new(dspreset_config)?;
    let dspreset_files = dspreset_exporter.export_samples(&test_samples)?;
    
    println!("   ✅ Generated {} files:", dspreset_files.len());
    for file in &dspreset_files {
        println!("      📄 {}", file.display());
    }
    
    // Verify file contents
    println!("\n🔍 Verifying Export Results...");
    
    // Check SFZ file content
    let sfz_files: Vec<_> = sfz_files.iter().filter(|f| f.extension().map_or(false, |ext| ext == "sfz")).collect();
    if let Some(sfz_file) = sfz_files.first() {
        let sfz_content = std::fs::read_to_string(sfz_file)?;
        println!("   📋 SFZ File Content Preview:");
        println!("      {}", sfz_content.lines().take(10).collect::<Vec<_>>().join("\n      "));
        
        // Basic validation
        assert!(sfz_content.contains("Generated by Batcherbird"));
        assert!(sfz_content.contains("Creator: Test User"));
        assert!(sfz_content.contains("<region>"));
        assert!(sfz_content.contains("sample="));
        assert!(sfz_content.contains("key="));
        println!("   ✅ SFZ format validation passed");
    }
    
    // Check Decent Sampler file content
    let dspreset_files: Vec<_> = dspreset_files.iter().filter(|f| f.extension().map_or(false, |ext| ext == "dspreset")).collect();
    if let Some(dspreset_file) = dspreset_files.first() {
        let dspreset_content = std::fs::read_to_string(dspreset_file)?;
        println!("   📋 Decent Sampler File Content Preview:");
        println!("      {}", dspreset_content.lines().take(10).collect::<Vec<_>>().join("\n      "));
        
        // Basic validation
        assert!(dspreset_content.contains("Generated by Batcherbird"));
        assert!(dspreset_content.contains("Test User"));
        assert!(dspreset_content.contains("<DecentSampler"));
        assert!(dspreset_content.contains("<sample"));
        assert!(dspreset_content.contains("path="));
        println!("   ✅ Decent Sampler format validation passed");
    }
    
    println!("\n🎉 All export format tests passed!");
    println!("   🎼 SFZ files: {} (including {} .sfz files)", sfz_files.len(), sfz_files.len());
    println!("   🎹 Decent Sampler files: {} (including {} .dspreset files)", dspreset_files.len(), dspreset_files.len());
    
    Ok(())
}