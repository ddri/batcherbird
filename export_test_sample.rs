use std::fs;
use std::path::PathBuf;

fn main() {
    // Simulate the content that would be generated
    
    // SFZ example with multiple velocity layers
    let sfz_content = r#"// TestInstrument - Generated by Batcherbird
// Creator: Test User
// Description: Test SFZ instrument

<control>
default_path=samples/

<global>
ampeg_release=0.5

<group>
lovel=1
hivel=63

<region>
sample=TestInstrument_C4_60_vel064.wav
key=60

<group>
lovel=64
hivel=127

<region>
sample=TestInstrument_C4_60_vel127.wav
key=60
"#;

    // Decent Sampler example
    let dspreset_content = r#"<?xml version="1.0" encoding="UTF-8"?>
<!-- TestInstrument - Generated by Batcherbird -->
<!-- Creator: Test User -->
<!-- Description: Test Decent Sampler instrument -->
<DecentSampler minVersion="1.0.0">
  <info>
    <author>Test User</author>
    <description>Test Decent Sampler instrument</description>
  </info>

  <ui>
    <tab name="main">
      <labeled-knob x="75" y="75" width="90" height="105" label="Attack" type="float" minValue="0.0" maxValue="4.0" value="0.05" textColor="AA000000">
        <binding type="amp" level="instrument" position="0" parameter="ENV_ATTACK" />
      </labeled-knob>
      <labeled-knob x="175" y="75" width="90" height="105" label="Release" type="float" minValue="0.0" maxValue="4.0" value="1.0" textColor="AA000000">
        <binding type="amp" level="instrument" position="0" parameter="ENV_RELEASE" />
      </labeled-knob>
    </tab>
  </ui>

  <groups>
    <group ampVelTrack="0.5" volume="0.0">
      <amplifier attack="0.05" decay="0.0" sustain="1.0" release="1.0" />
      <sample loNote="64" hiNote="64" rootNote="64" loVel="0" hiVel="127" path="TestInstrument_E4_64_vel096.wav" />
    </group>
  </groups>

  <effects>
    <effect type="lowpass" frequency="22000.0" />
    <effect type="reverb" roomSize="0.8" damping="0.2" wetLevel="0.2" dryLevel="1.0" />
  </effects>

  <midi>
    <!-- MIDI CC bindings for knobs -->
  </midi>
</DecentSampler>
"#;

    // Create output directory
    fs::create_dir_all("./export_examples").expect("Failed to create directory");
    
    // Write example files
    fs::write("./export_examples/example_instrument.sfz", sfz_content)
        .expect("Failed to write SFZ file");
    
    fs::write("./export_examples/example_instrument.dspreset", dspreset_content)
        .expect("Failed to write Decent Sampler file");
    
    println!("âœ… Generated example export files:");
    println!("   ðŸŽ¼ SFZ: ./export_examples/example_instrument.sfz");
    println!("   ðŸŽ¹ Decent Sampler: ./export_examples/example_instrument.dspreset");
    
    println!("\nðŸ“‹ SFZ Content Preview:");
    println!("{}", sfz_content.lines().take(15).collect::<Vec<_>>().join("\n"));
    
    println!("\nðŸ“‹ Decent Sampler Content Preview:");
    println!("{}", dspreset_content.lines().take(15).collect::<Vec<_>>().join("\n"));
}