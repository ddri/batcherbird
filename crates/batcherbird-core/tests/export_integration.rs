use batcherbird_core::export::{ExportConfig, AudioFormat, SampleExporter};
use batcherbird_core::sampler::Sample;
use batcherbird_core::detection::DetectionConfig;
use std::time::{Duration, SystemTime};

#[test]
fn test_sfz_export() {
    // Create test samples
    let test_samples = vec![
        Sample {
            note: 60, // C4
            velocity: 64,
            audio_data: vec![0.5, 0.3, 0.1, 0.0, -0.1, -0.3, -0.5],
            sample_rate: 44100,
            channels: 1,
            recorded_at: SystemTime::now(),
            midi_timing: Duration::from_millis(100),
            audio_timing: Duration::from_millis(2000),
        },
        Sample {
            note: 60, // C4
            velocity: 127,
            audio_data: vec![0.8, 0.6, 0.2, 0.0, -0.2, -0.6, -0.8],
            sample_rate: 44100,
            channels: 1,
            recorded_at: SystemTime::now(),
            midi_timing: Duration::from_millis(100),
            audio_timing: Duration::from_millis(2000),
        },
    ];
    
    // Create temp directory for test
    let temp_dir = std::env::temp_dir().join("batcherbird_test_sfz");
    std::fs::create_dir_all(&temp_dir).unwrap();
    
    let config = ExportConfig {
        output_directory: temp_dir.clone(),
        naming_pattern: "TestInstrument_{note_name}_{note}_{velocity}.wav".to_string(),
        sample_format: AudioFormat::SFZ,
        normalize: false,
        fade_in_ms: 0.0,
        fade_out_ms: 0.0,
        apply_detection: false,
        detection_config: DetectionConfig::default(),
        creator_name: Some("Test User".to_string()),
        instrument_description: Some("Test SFZ instrument".to_string()),
    };
    
    let exporter = SampleExporter::new(config).unwrap();
    let files = exporter.export_samples(&test_samples).unwrap();
    
    // Should have 2 WAV files + 1 SFZ file
    assert_eq!(files.len(), 3);
    
    // Find and verify SFZ file
    let sfz_file = files.iter().find(|f| f.extension().map_or(false, |ext| ext == "sfz")).unwrap();
    let sfz_content = std::fs::read_to_string(sfz_file).unwrap();
    
    assert!(sfz_content.contains("Generated by Batcherbird"));
    assert!(sfz_content.contains("Creator: Test User"));
    assert!(sfz_content.contains("<region>"));
    assert!(sfz_content.contains("sample="));
    assert!(sfz_content.contains("key=60"));
    
    // Cleanup
    std::fs::remove_dir_all(&temp_dir).ok();
}

#[test]
fn test_decent_sampler_export() {
    // Create test samples
    let test_samples = vec![
        Sample {
            note: 64, // E4
            velocity: 96,
            audio_data: vec![0.4, 0.2, 0.1, 0.0, -0.1, -0.2, -0.4],
            sample_rate: 44100,
            channels: 1,
            recorded_at: SystemTime::now(),
            midi_timing: Duration::from_millis(100),
            audio_timing: Duration::from_millis(2000),
        },
    ];
    
    // Create temp directory for test
    let temp_dir = std::env::temp_dir().join("batcherbird_test_dspreset");
    std::fs::create_dir_all(&temp_dir).unwrap();
    
    let config = ExportConfig {
        output_directory: temp_dir.clone(),
        naming_pattern: "TestInstrument_{note_name}_{note}_{velocity}.wav".to_string(),
        sample_format: AudioFormat::DecentSampler,
        normalize: false,
        fade_in_ms: 0.0,
        fade_out_ms: 0.0,
        apply_detection: false,
        detection_config: DetectionConfig::default(),
        creator_name: Some("Test User".to_string()),
        instrument_description: Some("Test Decent Sampler instrument".to_string()),
    };
    
    let exporter = SampleExporter::new(config).unwrap();
    let files = exporter.export_samples(&test_samples).unwrap();
    
    // Should have 1 WAV file + 1 .dspreset file
    assert_eq!(files.len(), 2);
    
    // Find and verify .dspreset file
    let dspreset_file = files.iter().find(|f| f.extension().map_or(false, |ext| ext == "dspreset")).unwrap();
    let dspreset_content = std::fs::read_to_string(dspreset_file).unwrap();
    
    assert!(dspreset_content.contains("Generated by Batcherbird"));
    assert!(dspreset_content.contains("Test User"));
    assert!(dspreset_content.contains("<DecentSampler"));
    assert!(dspreset_content.contains("<sample"));
    assert!(dspreset_content.contains("path="));
    assert!(dspreset_content.contains("loNote=\"64\""));
    
    // Cleanup
    std::fs::remove_dir_all(&temp_dir).ok();
}